# Optional - The name of the workflow as it will appear in the "Actions" tab of the GitHub repository. 
# If this field is omitted, the name of the workflow file will be used instead.
name: frontend-workflow

# Specifies the trigger for this workflow. This example uses the push event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request. 
# This is triggered by a push to the main and the github-actions-backend branches;
on:
    push:
        branches:
            - main

jobs:
    # Defines a job named test1. The child keys will define properties of the job.  
    tests:
        # Configures the job to run on the latest version of an Ubuntu Linux runner. 
        # This means that the job will execute on a fresh virtual machine hosted by GitHub
        runs-on: ubuntu-latest
        
        # Groups together all the steps that run in the test1 job. 
        # Each item nested under this section is a separate action or shell script.
        steps:
              
            - uses: actions/checkout@v4

            - name: 'Create env file'
            # On copie tous les secrets contenus dans le repo dans un fichier .env
              run: |
                  echo "${{ secrets.ALL_FRONTEND_ENV_VARIABLES }}" > .env
                  echo "${{ secrets.ALL_FRONTEND_ENV_VARIABLES }}" > ./kubernetes/.env

            # - name: run tests in container
            #   run: docker compose -f docker-compose.back.test.yml up --build

            - name: "upload env file to use it in the deploy job"
              uses: actions/upload-artifact@v3
              with:
                name: env
                path: |
                  .env
                  ./kubernetes/.env

    ################################################################################     

    check-code-quality-with-sonarqube:
        
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v3
                with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
              - name: SonarCloud Scan
                uses: SonarSource/sonarcloud-github-action@master
                env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            # Check the Quality Gate status.
              - name: SonarQube Quality Gate check
                id: sonarqube-quality-gate-check
                uses: sonarsource/sonarqube-quality-gate-action@master
                # Force to fail step after specific time.
                timeout-minutes: 5
                env:
                 SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}             

              # Show the Quality Gate status.
              # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
              - name: "Show SonarQube Quality Gate Status value"
                run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
     
    ################################################################################     

    security-check:
        
        runs-on: ubuntu-latest
        # Attend que le job test soit termin√© pour commencer
        needs: tests

        steps:

            - uses: actions/checkout@v4

            - name: Download env file created as an artifact to add it to the container
              uses: actions/download-artifact@v3
              with:
                name: env

            - name: Build the Docker image with docker-compose
              run: |
                    docker compose -f docker-compose.front.dev.yml build

            - name: Run Snyk to check for vulnerabilities
              uses: snyk/actions/node@master
              env:
                SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                command: monitor
            
            - name: Scan the built image for vulnerabilities and ignores issues as they can't be fixed yet
              uses: snyk/actions/docker@master
              continue-on-error: true
              with: 
                image: frontend_skin-sight-frontend:latest
              env:
                SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    ################################################################################  
    
    push-to-dockerhub:

        runs-on: ubuntu-latest
        needs: [security-check, check-code-quality-with-sonarqube]
        
        steps:
          
            - name: Checkout the repository
              uses: actions/checkout@v4

            - name: "download env file to add it to the container"
              uses: actions/download-artifact@v3
              with:
                name: env
              
            - name: connect to dockerhub
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build the Docker image with docker-compose
              run: |
                    docker-compose -f docker-compose.front.dev.yml build

                
            - name: Push the Docker image to the DockerHub registry
              run: |
                    docker tag frontend_skin-sight-frontend:latest ${{ secrets.DOCKERHUB_USERNAME }}/frontend_skin-sight-frontend
                    docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend_skin-sight-frontend

    